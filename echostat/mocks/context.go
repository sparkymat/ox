// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	http "net/http"

	echo "github.com/labstack/echo/v4"

	io "io"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	url "net/url"
)

// EchoContext is an autogenerated mock type for the Context type
type EchoContext struct {
	mock.Mock
}

type EchoContext_Expecter struct {
	mock *mock.Mock
}

func (_m *EchoContext) EXPECT() *EchoContext_Expecter {
	return &EchoContext_Expecter{mock: &_m.Mock}
}

// Attachment provides a mock function with given fields: file, name
func (_m *EchoContext) Attachment(file string, name string) error {
	ret := _m.Called(file, name)

	if len(ret) == 0 {
		panic("no return value specified for Attachment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(file, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Attachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attachment'
type EchoContext_Attachment_Call struct {
	*mock.Call
}

// Attachment is a helper method to define mock.On call
//   - file string
//   - name string
func (_e *EchoContext_Expecter) Attachment(file interface{}, name interface{}) *EchoContext_Attachment_Call {
	return &EchoContext_Attachment_Call{Call: _e.mock.On("Attachment", file, name)}
}

func (_c *EchoContext_Attachment_Call) Run(run func(file string, name string)) *EchoContext_Attachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *EchoContext_Attachment_Call) Return(_a0 error) *EchoContext_Attachment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Attachment_Call) RunAndReturn(run func(string, string) error) *EchoContext_Attachment_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: i
func (_m *EchoContext) Bind(i interface{}) error {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type EchoContext_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - i interface{}
func (_e *EchoContext_Expecter) Bind(i interface{}) *EchoContext_Bind_Call {
	return &EchoContext_Bind_Call{Call: _e.mock.On("Bind", i)}
}

func (_c *EchoContext_Bind_Call) Run(run func(i interface{})) *EchoContext_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *EchoContext_Bind_Call) Return(_a0 error) *EchoContext_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Bind_Call) RunAndReturn(run func(interface{}) error) *EchoContext_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Blob provides a mock function with given fields: code, contentType, b
func (_m *EchoContext) Blob(code int, contentType string, b []byte) error {
	ret := _m.Called(code, contentType, b)

	if len(ret) == 0 {
		panic("no return value specified for Blob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, []byte) error); ok {
		r0 = rf(code, contentType, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Blob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Blob'
type EchoContext_Blob_Call struct {
	*mock.Call
}

// Blob is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - b []byte
func (_e *EchoContext_Expecter) Blob(code interface{}, contentType interface{}, b interface{}) *EchoContext_Blob_Call {
	return &EchoContext_Blob_Call{Call: _e.mock.On("Blob", code, contentType, b)}
}

func (_c *EchoContext_Blob_Call) Run(run func(code int, contentType string, b []byte)) *EchoContext_Blob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *EchoContext_Blob_Call) Return(_a0 error) *EchoContext_Blob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Blob_Call) RunAndReturn(run func(int, string, []byte) error) *EchoContext_Blob_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: name
func (_m *EchoContext) Cookie(name string) (*http.Cookie, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*http.Cookie, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EchoContext_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type EchoContext_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *EchoContext_Expecter) Cookie(name interface{}) *EchoContext_Cookie_Call {
	return &EchoContext_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *EchoContext_Cookie_Call) Run(run func(name string)) *EchoContext_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_Cookie_Call) Return(_a0 *http.Cookie, _a1 error) *EchoContext_Cookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EchoContext_Cookie_Call) RunAndReturn(run func(string) (*http.Cookie, error)) *EchoContext_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function with given fields:
func (_m *EchoContext) Cookies() []*http.Cookie {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// EchoContext_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type EchoContext_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Cookies() *EchoContext_Cookies_Call {
	return &EchoContext_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *EchoContext_Cookies_Call) Run(run func()) *EchoContext_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Cookies_Call) Return(_a0 []*http.Cookie) *EchoContext_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *EchoContext_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// Echo provides a mock function with given fields:
func (_m *EchoContext) Echo() *echo.Echo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Echo")
	}

	var r0 *echo.Echo
	if rf, ok := ret.Get(0).(func() *echo.Echo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Echo)
		}
	}

	return r0
}

// EchoContext_Echo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Echo'
type EchoContext_Echo_Call struct {
	*mock.Call
}

// Echo is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Echo() *EchoContext_Echo_Call {
	return &EchoContext_Echo_Call{Call: _e.mock.On("Echo")}
}

func (_c *EchoContext_Echo_Call) Run(run func()) *EchoContext_Echo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Echo_Call) Return(_a0 *echo.Echo) *EchoContext_Echo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Echo_Call) RunAndReturn(run func() *echo.Echo) *EchoContext_Echo_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err
func (_m *EchoContext) Error(err error) {
	_m.Called(err)
}

// EchoContext_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type EchoContext_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *EchoContext_Expecter) Error(err interface{}) *EchoContext_Error_Call {
	return &EchoContext_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *EchoContext_Error_Call) Run(run func(err error)) *EchoContext_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *EchoContext_Error_Call) Return() *EchoContext_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_Error_Call) RunAndReturn(run func(error)) *EchoContext_Error_Call {
	_c.Call.Return(run)
	return _c
}

// File provides a mock function with given fields: file
func (_m *EchoContext) File(file string) error {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for File")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_File_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'File'
type EchoContext_File_Call struct {
	*mock.Call
}

// File is a helper method to define mock.On call
//   - file string
func (_e *EchoContext_Expecter) File(file interface{}) *EchoContext_File_Call {
	return &EchoContext_File_Call{Call: _e.mock.On("File", file)}
}

func (_c *EchoContext_File_Call) Run(run func(file string)) *EchoContext_File_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_File_Call) Return(_a0 error) *EchoContext_File_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_File_Call) RunAndReturn(run func(string) error) *EchoContext_File_Call {
	_c.Call.Return(run)
	return _c
}

// FormFile provides a mock function with given fields: name
func (_m *EchoContext) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormFile")
	}

	var r0 *multipart.FileHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*multipart.FileHeader, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EchoContext_FormFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormFile'
type EchoContext_FormFile_Call struct {
	*mock.Call
}

// FormFile is a helper method to define mock.On call
//   - name string
func (_e *EchoContext_Expecter) FormFile(name interface{}) *EchoContext_FormFile_Call {
	return &EchoContext_FormFile_Call{Call: _e.mock.On("FormFile", name)}
}

func (_c *EchoContext_FormFile_Call) Run(run func(name string)) *EchoContext_FormFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_FormFile_Call) Return(_a0 *multipart.FileHeader, _a1 error) *EchoContext_FormFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EchoContext_FormFile_Call) RunAndReturn(run func(string) (*multipart.FileHeader, error)) *EchoContext_FormFile_Call {
	_c.Call.Return(run)
	return _c
}

// FormParams provides a mock function with given fields:
func (_m *EchoContext) FormParams() (url.Values, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FormParams")
	}

	var r0 url.Values
	var r1 error
	if rf, ok := ret.Get(0).(func() (url.Values, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EchoContext_FormParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormParams'
type EchoContext_FormParams_Call struct {
	*mock.Call
}

// FormParams is a helper method to define mock.On call
func (_e *EchoContext_Expecter) FormParams() *EchoContext_FormParams_Call {
	return &EchoContext_FormParams_Call{Call: _e.mock.On("FormParams")}
}

func (_c *EchoContext_FormParams_Call) Run(run func()) *EchoContext_FormParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_FormParams_Call) Return(_a0 url.Values, _a1 error) *EchoContext_FormParams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EchoContext_FormParams_Call) RunAndReturn(run func() (url.Values, error)) *EchoContext_FormParams_Call {
	_c.Call.Return(run)
	return _c
}

// FormValue provides a mock function with given fields: name
func (_m *EchoContext) FormValue(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormValue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_FormValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormValue'
type EchoContext_FormValue_Call struct {
	*mock.Call
}

// FormValue is a helper method to define mock.On call
//   - name string
func (_e *EchoContext_Expecter) FormValue(name interface{}) *EchoContext_FormValue_Call {
	return &EchoContext_FormValue_Call{Call: _e.mock.On("FormValue", name)}
}

func (_c *EchoContext_FormValue_Call) Run(run func(name string)) *EchoContext_FormValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_FormValue_Call) Return(_a0 string) *EchoContext_FormValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_FormValue_Call) RunAndReturn(run func(string) string) *EchoContext_FormValue_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *EchoContext) Get(key string) interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// EchoContext_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type EchoContext_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *EchoContext_Expecter) Get(key interface{}) *EchoContext_Get_Call {
	return &EchoContext_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *EchoContext_Get_Call) Run(run func(key string)) *EchoContext_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_Get_Call) Return(_a0 interface{}) *EchoContext_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Get_Call) RunAndReturn(run func(string) interface{}) *EchoContext_Get_Call {
	_c.Call.Return(run)
	return _c
}

// HTML provides a mock function with given fields: code, html
func (_m *EchoContext) HTML(code int, html string) error {
	ret := _m.Called(code, html)

	if len(ret) == 0 {
		panic("no return value specified for HTML")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(code, html)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_HTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTML'
type EchoContext_HTML_Call struct {
	*mock.Call
}

// HTML is a helper method to define mock.On call
//   - code int
//   - html string
func (_e *EchoContext_Expecter) HTML(code interface{}, html interface{}) *EchoContext_HTML_Call {
	return &EchoContext_HTML_Call{Call: _e.mock.On("HTML", code, html)}
}

func (_c *EchoContext_HTML_Call) Run(run func(code int, html string)) *EchoContext_HTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *EchoContext_HTML_Call) Return(_a0 error) *EchoContext_HTML_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_HTML_Call) RunAndReturn(run func(int, string) error) *EchoContext_HTML_Call {
	_c.Call.Return(run)
	return _c
}

// HTMLBlob provides a mock function with given fields: code, b
func (_m *EchoContext) HTMLBlob(code int, b []byte) error {
	ret := _m.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for HTMLBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_HTMLBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTMLBlob'
type EchoContext_HTMLBlob_Call struct {
	*mock.Call
}

// HTMLBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *EchoContext_Expecter) HTMLBlob(code interface{}, b interface{}) *EchoContext_HTMLBlob_Call {
	return &EchoContext_HTMLBlob_Call{Call: _e.mock.On("HTMLBlob", code, b)}
}

func (_c *EchoContext_HTMLBlob_Call) Run(run func(code int, b []byte)) *EchoContext_HTMLBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *EchoContext_HTMLBlob_Call) Return(_a0 error) *EchoContext_HTMLBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_HTMLBlob_Call) RunAndReturn(run func(int, []byte) error) *EchoContext_HTMLBlob_Call {
	_c.Call.Return(run)
	return _c
}

// Handler provides a mock function with given fields:
func (_m *EchoContext) Handler() echo.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handler")
	}

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// EchoContext_Handler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handler'
type EchoContext_Handler_Call struct {
	*mock.Call
}

// Handler is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Handler() *EchoContext_Handler_Call {
	return &EchoContext_Handler_Call{Call: _e.mock.On("Handler")}
}

func (_c *EchoContext_Handler_Call) Run(run func()) *EchoContext_Handler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Handler_Call) Return(_a0 echo.HandlerFunc) *EchoContext_Handler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Handler_Call) RunAndReturn(run func() echo.HandlerFunc) *EchoContext_Handler_Call {
	_c.Call.Return(run)
	return _c
}

// Inline provides a mock function with given fields: file, name
func (_m *EchoContext) Inline(file string, name string) error {
	ret := _m.Called(file, name)

	if len(ret) == 0 {
		panic("no return value specified for Inline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(file, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Inline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inline'
type EchoContext_Inline_Call struct {
	*mock.Call
}

// Inline is a helper method to define mock.On call
//   - file string
//   - name string
func (_e *EchoContext_Expecter) Inline(file interface{}, name interface{}) *EchoContext_Inline_Call {
	return &EchoContext_Inline_Call{Call: _e.mock.On("Inline", file, name)}
}

func (_c *EchoContext_Inline_Call) Run(run func(file string, name string)) *EchoContext_Inline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *EchoContext_Inline_Call) Return(_a0 error) *EchoContext_Inline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Inline_Call) RunAndReturn(run func(string, string) error) *EchoContext_Inline_Call {
	_c.Call.Return(run)
	return _c
}

// IsTLS provides a mock function with given fields:
func (_m *EchoContext) IsTLS() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTLS")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EchoContext_IsTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTLS'
type EchoContext_IsTLS_Call struct {
	*mock.Call
}

// IsTLS is a helper method to define mock.On call
func (_e *EchoContext_Expecter) IsTLS() *EchoContext_IsTLS_Call {
	return &EchoContext_IsTLS_Call{Call: _e.mock.On("IsTLS")}
}

func (_c *EchoContext_IsTLS_Call) Run(run func()) *EchoContext_IsTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_IsTLS_Call) Return(_a0 bool) *EchoContext_IsTLS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_IsTLS_Call) RunAndReturn(run func() bool) *EchoContext_IsTLS_Call {
	_c.Call.Return(run)
	return _c
}

// IsWebSocket provides a mock function with given fields:
func (_m *EchoContext) IsWebSocket() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWebSocket")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EchoContext_IsWebSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWebSocket'
type EchoContext_IsWebSocket_Call struct {
	*mock.Call
}

// IsWebSocket is a helper method to define mock.On call
func (_e *EchoContext_Expecter) IsWebSocket() *EchoContext_IsWebSocket_Call {
	return &EchoContext_IsWebSocket_Call{Call: _e.mock.On("IsWebSocket")}
}

func (_c *EchoContext_IsWebSocket_Call) Run(run func()) *EchoContext_IsWebSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_IsWebSocket_Call) Return(_a0 bool) *EchoContext_IsWebSocket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_IsWebSocket_Call) RunAndReturn(run func() bool) *EchoContext_IsWebSocket_Call {
	_c.Call.Return(run)
	return _c
}

// JSON provides a mock function with given fields: code, i
func (_m *EchoContext) JSON(code int, i interface{}) error {
	ret := _m.Called(code, i)

	if len(ret) == 0 {
		panic("no return value specified for JSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(code, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type EchoContext_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - i interface{}
func (_e *EchoContext_Expecter) JSON(code interface{}, i interface{}) *EchoContext_JSON_Call {
	return &EchoContext_JSON_Call{Call: _e.mock.On("JSON", code, i)}
}

func (_c *EchoContext_JSON_Call) Run(run func(code int, i interface{})) *EchoContext_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *EchoContext_JSON_Call) Return(_a0 error) *EchoContext_JSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_JSON_Call) RunAndReturn(run func(int, interface{}) error) *EchoContext_JSON_Call {
	_c.Call.Return(run)
	return _c
}

// JSONBlob provides a mock function with given fields: code, b
func (_m *EchoContext) JSONBlob(code int, b []byte) error {
	ret := _m.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for JSONBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_JSONBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONBlob'
type EchoContext_JSONBlob_Call struct {
	*mock.Call
}

// JSONBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *EchoContext_Expecter) JSONBlob(code interface{}, b interface{}) *EchoContext_JSONBlob_Call {
	return &EchoContext_JSONBlob_Call{Call: _e.mock.On("JSONBlob", code, b)}
}

func (_c *EchoContext_JSONBlob_Call) Run(run func(code int, b []byte)) *EchoContext_JSONBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *EchoContext_JSONBlob_Call) Return(_a0 error) *EchoContext_JSONBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_JSONBlob_Call) RunAndReturn(run func(int, []byte) error) *EchoContext_JSONBlob_Call {
	_c.Call.Return(run)
	return _c
}

// JSONP provides a mock function with given fields: code, callback, i
func (_m *EchoContext) JSONP(code int, callback string, i interface{}) error {
	ret := _m.Called(code, callback, i)

	if len(ret) == 0 {
		panic("no return value specified for JSONP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(code, callback, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_JSONP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONP'
type EchoContext_JSONP_Call struct {
	*mock.Call
}

// JSONP is a helper method to define mock.On call
//   - code int
//   - callback string
//   - i interface{}
func (_e *EchoContext_Expecter) JSONP(code interface{}, callback interface{}, i interface{}) *EchoContext_JSONP_Call {
	return &EchoContext_JSONP_Call{Call: _e.mock.On("JSONP", code, callback, i)}
}

func (_c *EchoContext_JSONP_Call) Run(run func(code int, callback string, i interface{})) *EchoContext_JSONP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *EchoContext_JSONP_Call) Return(_a0 error) *EchoContext_JSONP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_JSONP_Call) RunAndReturn(run func(int, string, interface{}) error) *EchoContext_JSONP_Call {
	_c.Call.Return(run)
	return _c
}

// JSONPBlob provides a mock function with given fields: code, callback, b
func (_m *EchoContext) JSONPBlob(code int, callback string, b []byte) error {
	ret := _m.Called(code, callback, b)

	if len(ret) == 0 {
		panic("no return value specified for JSONPBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, []byte) error); ok {
		r0 = rf(code, callback, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_JSONPBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONPBlob'
type EchoContext_JSONPBlob_Call struct {
	*mock.Call
}

// JSONPBlob is a helper method to define mock.On call
//   - code int
//   - callback string
//   - b []byte
func (_e *EchoContext_Expecter) JSONPBlob(code interface{}, callback interface{}, b interface{}) *EchoContext_JSONPBlob_Call {
	return &EchoContext_JSONPBlob_Call{Call: _e.mock.On("JSONPBlob", code, callback, b)}
}

func (_c *EchoContext_JSONPBlob_Call) Run(run func(code int, callback string, b []byte)) *EchoContext_JSONPBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *EchoContext_JSONPBlob_Call) Return(_a0 error) *EchoContext_JSONPBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_JSONPBlob_Call) RunAndReturn(run func(int, string, []byte) error) *EchoContext_JSONPBlob_Call {
	_c.Call.Return(run)
	return _c
}

// JSONPretty provides a mock function with given fields: code, i, indent
func (_m *EchoContext) JSONPretty(code int, i interface{}, indent string) error {
	ret := _m.Called(code, i, indent)

	if len(ret) == 0 {
		panic("no return value specified for JSONPretty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}, string) error); ok {
		r0 = rf(code, i, indent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_JSONPretty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONPretty'
type EchoContext_JSONPretty_Call struct {
	*mock.Call
}

// JSONPretty is a helper method to define mock.On call
//   - code int
//   - i interface{}
//   - indent string
func (_e *EchoContext_Expecter) JSONPretty(code interface{}, i interface{}, indent interface{}) *EchoContext_JSONPretty_Call {
	return &EchoContext_JSONPretty_Call{Call: _e.mock.On("JSONPretty", code, i, indent)}
}

func (_c *EchoContext_JSONPretty_Call) Run(run func(code int, i interface{}, indent string)) *EchoContext_JSONPretty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *EchoContext_JSONPretty_Call) Return(_a0 error) *EchoContext_JSONPretty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_JSONPretty_Call) RunAndReturn(run func(int, interface{}, string) error) *EchoContext_JSONPretty_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with given fields:
func (_m *EchoContext) Logger() echo.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 echo.Logger
	if rf, ok := ret.Get(0).(func() echo.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.Logger)
		}
	}

	return r0
}

// EchoContext_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type EchoContext_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Logger() *EchoContext_Logger_Call {
	return &EchoContext_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *EchoContext_Logger_Call) Run(run func()) *EchoContext_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Logger_Call) Return(_a0 echo.Logger) *EchoContext_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Logger_Call) RunAndReturn(run func() echo.Logger) *EchoContext_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// MultipartForm provides a mock function with given fields:
func (_m *EchoContext) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if rf, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EchoContext_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type EchoContext_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *EchoContext_Expecter) MultipartForm() *EchoContext_MultipartForm_Call {
	return &EchoContext_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *EchoContext_MultipartForm_Call) Run(run func()) *EchoContext_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_MultipartForm_Call) Return(_a0 *multipart.Form, _a1 error) *EchoContext_MultipartForm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EchoContext_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *EchoContext_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// NoContent provides a mock function with given fields: code
func (_m *EchoContext) NoContent(code int) error {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for NoContent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_NoContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoContent'
type EchoContext_NoContent_Call struct {
	*mock.Call
}

// NoContent is a helper method to define mock.On call
//   - code int
func (_e *EchoContext_Expecter) NoContent(code interface{}) *EchoContext_NoContent_Call {
	return &EchoContext_NoContent_Call{Call: _e.mock.On("NoContent", code)}
}

func (_c *EchoContext_NoContent_Call) Run(run func(code int)) *EchoContext_NoContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *EchoContext_NoContent_Call) Return(_a0 error) *EchoContext_NoContent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_NoContent_Call) RunAndReturn(run func(int) error) *EchoContext_NoContent_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function with given fields: name
func (_m *EchoContext) Param(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type EchoContext_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
//   - name string
func (_e *EchoContext_Expecter) Param(name interface{}) *EchoContext_Param_Call {
	return &EchoContext_Param_Call{Call: _e.mock.On("Param", name)}
}

func (_c *EchoContext_Param_Call) Run(run func(name string)) *EchoContext_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_Param_Call) Return(_a0 string) *EchoContext_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Param_Call) RunAndReturn(run func(string) string) *EchoContext_Param_Call {
	_c.Call.Return(run)
	return _c
}

// ParamNames provides a mock function with given fields:
func (_m *EchoContext) ParamNames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamNames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// EchoContext_ParamNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamNames'
type EchoContext_ParamNames_Call struct {
	*mock.Call
}

// ParamNames is a helper method to define mock.On call
func (_e *EchoContext_Expecter) ParamNames() *EchoContext_ParamNames_Call {
	return &EchoContext_ParamNames_Call{Call: _e.mock.On("ParamNames")}
}

func (_c *EchoContext_ParamNames_Call) Run(run func()) *EchoContext_ParamNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_ParamNames_Call) Return(_a0 []string) *EchoContext_ParamNames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_ParamNames_Call) RunAndReturn(run func() []string) *EchoContext_ParamNames_Call {
	_c.Call.Return(run)
	return _c
}

// ParamValues provides a mock function with given fields:
func (_m *EchoContext) ParamValues() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamValues")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// EchoContext_ParamValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamValues'
type EchoContext_ParamValues_Call struct {
	*mock.Call
}

// ParamValues is a helper method to define mock.On call
func (_e *EchoContext_Expecter) ParamValues() *EchoContext_ParamValues_Call {
	return &EchoContext_ParamValues_Call{Call: _e.mock.On("ParamValues")}
}

func (_c *EchoContext_ParamValues_Call) Run(run func()) *EchoContext_ParamValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_ParamValues_Call) Return(_a0 []string) *EchoContext_ParamValues_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_ParamValues_Call) RunAndReturn(run func() []string) *EchoContext_ParamValues_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields:
func (_m *EchoContext) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type EchoContext_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Path() *EchoContext_Path_Call {
	return &EchoContext_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *EchoContext_Path_Call) Run(run func()) *EchoContext_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Path_Call) Return(_a0 string) *EchoContext_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Path_Call) RunAndReturn(run func() string) *EchoContext_Path_Call {
	_c.Call.Return(run)
	return _c
}

// QueryParam provides a mock function with given fields: name
func (_m *EchoContext) QueryParam(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for QueryParam")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_QueryParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryParam'
type EchoContext_QueryParam_Call struct {
	*mock.Call
}

// QueryParam is a helper method to define mock.On call
//   - name string
func (_e *EchoContext_Expecter) QueryParam(name interface{}) *EchoContext_QueryParam_Call {
	return &EchoContext_QueryParam_Call{Call: _e.mock.On("QueryParam", name)}
}

func (_c *EchoContext_QueryParam_Call) Run(run func(name string)) *EchoContext_QueryParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_QueryParam_Call) Return(_a0 string) *EchoContext_QueryParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_QueryParam_Call) RunAndReturn(run func(string) string) *EchoContext_QueryParam_Call {
	_c.Call.Return(run)
	return _c
}

// QueryParams provides a mock function with given fields:
func (_m *EchoContext) QueryParams() url.Values {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryParams")
	}

	var r0 url.Values
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	return r0
}

// EchoContext_QueryParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryParams'
type EchoContext_QueryParams_Call struct {
	*mock.Call
}

// QueryParams is a helper method to define mock.On call
func (_e *EchoContext_Expecter) QueryParams() *EchoContext_QueryParams_Call {
	return &EchoContext_QueryParams_Call{Call: _e.mock.On("QueryParams")}
}

func (_c *EchoContext_QueryParams_Call) Run(run func()) *EchoContext_QueryParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_QueryParams_Call) Return(_a0 url.Values) *EchoContext_QueryParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_QueryParams_Call) RunAndReturn(run func() url.Values) *EchoContext_QueryParams_Call {
	_c.Call.Return(run)
	return _c
}

// QueryString provides a mock function with given fields:
func (_m *EchoContext) QueryString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for QueryString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_QueryString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryString'
type EchoContext_QueryString_Call struct {
	*mock.Call
}

// QueryString is a helper method to define mock.On call
func (_e *EchoContext_Expecter) QueryString() *EchoContext_QueryString_Call {
	return &EchoContext_QueryString_Call{Call: _e.mock.On("QueryString")}
}

func (_c *EchoContext_QueryString_Call) Run(run func()) *EchoContext_QueryString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_QueryString_Call) Return(_a0 string) *EchoContext_QueryString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_QueryString_Call) RunAndReturn(run func() string) *EchoContext_QueryString_Call {
	_c.Call.Return(run)
	return _c
}

// RealIP provides a mock function with given fields:
func (_m *EchoContext) RealIP() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RealIP")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_RealIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RealIP'
type EchoContext_RealIP_Call struct {
	*mock.Call
}

// RealIP is a helper method to define mock.On call
func (_e *EchoContext_Expecter) RealIP() *EchoContext_RealIP_Call {
	return &EchoContext_RealIP_Call{Call: _e.mock.On("RealIP")}
}

func (_c *EchoContext_RealIP_Call) Run(run func()) *EchoContext_RealIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_RealIP_Call) Return(_a0 string) *EchoContext_RealIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_RealIP_Call) RunAndReturn(run func() string) *EchoContext_RealIP_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function with given fields: code, _a1
func (_m *EchoContext) Redirect(code int, _a1 string) error {
	ret := _m.Called(code, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Redirect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(code, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type EchoContext_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - code int
//   - _a1 string
func (_e *EchoContext_Expecter) Redirect(code interface{}, _a1 interface{}) *EchoContext_Redirect_Call {
	return &EchoContext_Redirect_Call{Call: _e.mock.On("Redirect", code, _a1)}
}

func (_c *EchoContext_Redirect_Call) Run(run func(code int, _a1 string)) *EchoContext_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *EchoContext_Redirect_Call) Return(_a0 error) *EchoContext_Redirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Redirect_Call) RunAndReturn(run func(int, string) error) *EchoContext_Redirect_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: code, name, data
func (_m *EchoContext) Render(code int, name string, data interface{}) error {
	ret := _m.Called(code, name, data)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(code, name, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type EchoContext_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - code int
//   - name string
//   - data interface{}
func (_e *EchoContext_Expecter) Render(code interface{}, name interface{}, data interface{}) *EchoContext_Render_Call {
	return &EchoContext_Render_Call{Call: _e.mock.On("Render", code, name, data)}
}

func (_c *EchoContext_Render_Call) Run(run func(code int, name string, data interface{})) *EchoContext_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *EchoContext_Render_Call) Return(_a0 error) *EchoContext_Render_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Render_Call) RunAndReturn(run func(int, string, interface{}) error) *EchoContext_Render_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields:
func (_m *EchoContext) Request() *http.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// EchoContext_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type EchoContext_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Request() *EchoContext_Request_Call {
	return &EchoContext_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *EchoContext_Request_Call) Run(run func()) *EchoContext_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Request_Call) Return(_a0 *http.Request) *EchoContext_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Request_Call) RunAndReturn(run func() *http.Request) *EchoContext_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: r, w
func (_m *EchoContext) Reset(r *http.Request, w http.ResponseWriter) {
	_m.Called(r, w)
}

// EchoContext_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type EchoContext_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
func (_e *EchoContext_Expecter) Reset(r interface{}, w interface{}) *EchoContext_Reset_Call {
	return &EchoContext_Reset_Call{Call: _e.mock.On("Reset", r, w)}
}

func (_c *EchoContext_Reset_Call) Run(run func(r *http.Request, w http.ResponseWriter)) *EchoContext_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter))
	})
	return _c
}

func (_c *EchoContext_Reset_Call) Return() *EchoContext_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_Reset_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter)) *EchoContext_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with given fields:
func (_m *EchoContext) Response() *echo.Response {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 *echo.Response
	if rf, ok := ret.Get(0).(func() *echo.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Response)
		}
	}

	return r0
}

// EchoContext_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type EchoContext_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Response() *EchoContext_Response_Call {
	return &EchoContext_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *EchoContext_Response_Call) Run(run func()) *EchoContext_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Response_Call) Return(_a0 *echo.Response) *EchoContext_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Response_Call) RunAndReturn(run func() *echo.Response) *EchoContext_Response_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function with given fields:
func (_m *EchoContext) Scheme() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EchoContext_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type EchoContext_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *EchoContext_Expecter) Scheme() *EchoContext_Scheme_Call {
	return &EchoContext_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *EchoContext_Scheme_Call) Run(run func()) *EchoContext_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EchoContext_Scheme_Call) Return(_a0 string) *EchoContext_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Scheme_Call) RunAndReturn(run func() string) *EchoContext_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, val
func (_m *EchoContext) Set(key string, val interface{}) {
	_m.Called(key, val)
}

// EchoContext_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type EchoContext_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - val interface{}
func (_e *EchoContext_Expecter) Set(key interface{}, val interface{}) *EchoContext_Set_Call {
	return &EchoContext_Set_Call{Call: _e.mock.On("Set", key, val)}
}

func (_c *EchoContext_Set_Call) Run(run func(key string, val interface{})) *EchoContext_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *EchoContext_Set_Call) Return() *EchoContext_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_Set_Call) RunAndReturn(run func(string, interface{})) *EchoContext_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetCookie provides a mock function with given fields: cookie
func (_m *EchoContext) SetCookie(cookie *http.Cookie) {
	_m.Called(cookie)
}

// EchoContext_SetCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookie'
type EchoContext_SetCookie_Call struct {
	*mock.Call
}

// SetCookie is a helper method to define mock.On call
//   - cookie *http.Cookie
func (_e *EchoContext_Expecter) SetCookie(cookie interface{}) *EchoContext_SetCookie_Call {
	return &EchoContext_SetCookie_Call{Call: _e.mock.On("SetCookie", cookie)}
}

func (_c *EchoContext_SetCookie_Call) Run(run func(cookie *http.Cookie)) *EchoContext_SetCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Cookie))
	})
	return _c
}

func (_c *EchoContext_SetCookie_Call) Return() *EchoContext_SetCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetCookie_Call) RunAndReturn(run func(*http.Cookie)) *EchoContext_SetCookie_Call {
	_c.Call.Return(run)
	return _c
}

// SetHandler provides a mock function with given fields: h
func (_m *EchoContext) SetHandler(h echo.HandlerFunc) {
	_m.Called(h)
}

// EchoContext_SetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandler'
type EchoContext_SetHandler_Call struct {
	*mock.Call
}

// SetHandler is a helper method to define mock.On call
//   - h echo.HandlerFunc
func (_e *EchoContext_Expecter) SetHandler(h interface{}) *EchoContext_SetHandler_Call {
	return &EchoContext_SetHandler_Call{Call: _e.mock.On("SetHandler", h)}
}

func (_c *EchoContext_SetHandler_Call) Run(run func(h echo.HandlerFunc)) *EchoContext_SetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.HandlerFunc))
	})
	return _c
}

func (_c *EchoContext_SetHandler_Call) Return() *EchoContext_SetHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetHandler_Call) RunAndReturn(run func(echo.HandlerFunc)) *EchoContext_SetHandler_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function with given fields: l
func (_m *EchoContext) SetLogger(l echo.Logger) {
	_m.Called(l)
}

// EchoContext_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type EchoContext_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - l echo.Logger
func (_e *EchoContext_Expecter) SetLogger(l interface{}) *EchoContext_SetLogger_Call {
	return &EchoContext_SetLogger_Call{Call: _e.mock.On("SetLogger", l)}
}

func (_c *EchoContext_SetLogger_Call) Run(run func(l echo.Logger)) *EchoContext_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Logger))
	})
	return _c
}

func (_c *EchoContext_SetLogger_Call) Return() *EchoContext_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetLogger_Call) RunAndReturn(run func(echo.Logger)) *EchoContext_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// SetParamNames provides a mock function with given fields: names
func (_m *EchoContext) SetParamNames(names ...string) {
	_va := make([]interface{}, len(names))
	for _i := range names {
		_va[_i] = names[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// EchoContext_SetParamNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParamNames'
type EchoContext_SetParamNames_Call struct {
	*mock.Call
}

// SetParamNames is a helper method to define mock.On call
//   - names ...string
func (_e *EchoContext_Expecter) SetParamNames(names ...interface{}) *EchoContext_SetParamNames_Call {
	return &EchoContext_SetParamNames_Call{Call: _e.mock.On("SetParamNames",
		append([]interface{}{}, names...)...)}
}

func (_c *EchoContext_SetParamNames_Call) Run(run func(names ...string)) *EchoContext_SetParamNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *EchoContext_SetParamNames_Call) Return() *EchoContext_SetParamNames_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetParamNames_Call) RunAndReturn(run func(...string)) *EchoContext_SetParamNames_Call {
	_c.Call.Return(run)
	return _c
}

// SetParamValues provides a mock function with given fields: values
func (_m *EchoContext) SetParamValues(values ...string) {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// EchoContext_SetParamValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetParamValues'
type EchoContext_SetParamValues_Call struct {
	*mock.Call
}

// SetParamValues is a helper method to define mock.On call
//   - values ...string
func (_e *EchoContext_Expecter) SetParamValues(values ...interface{}) *EchoContext_SetParamValues_Call {
	return &EchoContext_SetParamValues_Call{Call: _e.mock.On("SetParamValues",
		append([]interface{}{}, values...)...)}
}

func (_c *EchoContext_SetParamValues_Call) Run(run func(values ...string)) *EchoContext_SetParamValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *EchoContext_SetParamValues_Call) Return() *EchoContext_SetParamValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetParamValues_Call) RunAndReturn(run func(...string)) *EchoContext_SetParamValues_Call {
	_c.Call.Return(run)
	return _c
}

// SetPath provides a mock function with given fields: p
func (_m *EchoContext) SetPath(p string) {
	_m.Called(p)
}

// EchoContext_SetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPath'
type EchoContext_SetPath_Call struct {
	*mock.Call
}

// SetPath is a helper method to define mock.On call
//   - p string
func (_e *EchoContext_Expecter) SetPath(p interface{}) *EchoContext_SetPath_Call {
	return &EchoContext_SetPath_Call{Call: _e.mock.On("SetPath", p)}
}

func (_c *EchoContext_SetPath_Call) Run(run func(p string)) *EchoContext_SetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *EchoContext_SetPath_Call) Return() *EchoContext_SetPath_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetPath_Call) RunAndReturn(run func(string)) *EchoContext_SetPath_Call {
	_c.Call.Return(run)
	return _c
}

// SetRequest provides a mock function with given fields: r
func (_m *EchoContext) SetRequest(r *http.Request) {
	_m.Called(r)
}

// EchoContext_SetRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRequest'
type EchoContext_SetRequest_Call struct {
	*mock.Call
}

// SetRequest is a helper method to define mock.On call
//   - r *http.Request
func (_e *EchoContext_Expecter) SetRequest(r interface{}) *EchoContext_SetRequest_Call {
	return &EchoContext_SetRequest_Call{Call: _e.mock.On("SetRequest", r)}
}

func (_c *EchoContext_SetRequest_Call) Run(run func(r *http.Request)) *EchoContext_SetRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *EchoContext_SetRequest_Call) Return() *EchoContext_SetRequest_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetRequest_Call) RunAndReturn(run func(*http.Request)) *EchoContext_SetRequest_Call {
	_c.Call.Return(run)
	return _c
}

// SetResponse provides a mock function with given fields: r
func (_m *EchoContext) SetResponse(r *echo.Response) {
	_m.Called(r)
}

// EchoContext_SetResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetResponse'
type EchoContext_SetResponse_Call struct {
	*mock.Call
}

// SetResponse is a helper method to define mock.On call
//   - r *echo.Response
func (_e *EchoContext_Expecter) SetResponse(r interface{}) *EchoContext_SetResponse_Call {
	return &EchoContext_SetResponse_Call{Call: _e.mock.On("SetResponse", r)}
}

func (_c *EchoContext_SetResponse_Call) Run(run func(r *echo.Response)) *EchoContext_SetResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*echo.Response))
	})
	return _c
}

func (_c *EchoContext_SetResponse_Call) Return() *EchoContext_SetResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *EchoContext_SetResponse_Call) RunAndReturn(run func(*echo.Response)) *EchoContext_SetResponse_Call {
	_c.Call.Return(run)
	return _c
}

// Stream provides a mock function with given fields: code, contentType, r
func (_m *EchoContext) Stream(code int, contentType string, r io.Reader) error {
	ret := _m.Called(code, contentType, r)

	if len(ret) == 0 {
		panic("no return value specified for Stream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, io.Reader) error); ok {
		r0 = rf(code, contentType, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type EchoContext_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - r io.Reader
func (_e *EchoContext_Expecter) Stream(code interface{}, contentType interface{}, r interface{}) *EchoContext_Stream_Call {
	return &EchoContext_Stream_Call{Call: _e.mock.On("Stream", code, contentType, r)}
}

func (_c *EchoContext_Stream_Call) Run(run func(code int, contentType string, r io.Reader)) *EchoContext_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *EchoContext_Stream_Call) Return(_a0 error) *EchoContext_Stream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Stream_Call) RunAndReturn(run func(int, string, io.Reader) error) *EchoContext_Stream_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields: code, s
func (_m *EchoContext) String(code int, s string) error {
	ret := _m.Called(code, s)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(code, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type EchoContext_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - code int
//   - s string
func (_e *EchoContext_Expecter) String(code interface{}, s interface{}) *EchoContext_String_Call {
	return &EchoContext_String_Call{Call: _e.mock.On("String", code, s)}
}

func (_c *EchoContext_String_Call) Run(run func(code int, s string)) *EchoContext_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *EchoContext_String_Call) Return(_a0 error) *EchoContext_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_String_Call) RunAndReturn(run func(int, string) error) *EchoContext_String_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: i
func (_m *EchoContext) Validate(i interface{}) error {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type EchoContext_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - i interface{}
func (_e *EchoContext_Expecter) Validate(i interface{}) *EchoContext_Validate_Call {
	return &EchoContext_Validate_Call{Call: _e.mock.On("Validate", i)}
}

func (_c *EchoContext_Validate_Call) Run(run func(i interface{})) *EchoContext_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *EchoContext_Validate_Call) Return(_a0 error) *EchoContext_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_Validate_Call) RunAndReturn(run func(interface{}) error) *EchoContext_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// XML provides a mock function with given fields: code, i
func (_m *EchoContext) XML(code int, i interface{}) error {
	ret := _m.Called(code, i)

	if len(ret) == 0 {
		panic("no return value specified for XML")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(code, i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_XML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XML'
type EchoContext_XML_Call struct {
	*mock.Call
}

// XML is a helper method to define mock.On call
//   - code int
//   - i interface{}
func (_e *EchoContext_Expecter) XML(code interface{}, i interface{}) *EchoContext_XML_Call {
	return &EchoContext_XML_Call{Call: _e.mock.On("XML", code, i)}
}

func (_c *EchoContext_XML_Call) Run(run func(code int, i interface{})) *EchoContext_XML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *EchoContext_XML_Call) Return(_a0 error) *EchoContext_XML_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_XML_Call) RunAndReturn(run func(int, interface{}) error) *EchoContext_XML_Call {
	_c.Call.Return(run)
	return _c
}

// XMLBlob provides a mock function with given fields: code, b
func (_m *EchoContext) XMLBlob(code int, b []byte) error {
	ret := _m.Called(code, b)

	if len(ret) == 0 {
		panic("no return value specified for XMLBlob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(code, b)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_XMLBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XMLBlob'
type EchoContext_XMLBlob_Call struct {
	*mock.Call
}

// XMLBlob is a helper method to define mock.On call
//   - code int
//   - b []byte
func (_e *EchoContext_Expecter) XMLBlob(code interface{}, b interface{}) *EchoContext_XMLBlob_Call {
	return &EchoContext_XMLBlob_Call{Call: _e.mock.On("XMLBlob", code, b)}
}

func (_c *EchoContext_XMLBlob_Call) Run(run func(code int, b []byte)) *EchoContext_XMLBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]byte))
	})
	return _c
}

func (_c *EchoContext_XMLBlob_Call) Return(_a0 error) *EchoContext_XMLBlob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_XMLBlob_Call) RunAndReturn(run func(int, []byte) error) *EchoContext_XMLBlob_Call {
	_c.Call.Return(run)
	return _c
}

// XMLPretty provides a mock function with given fields: code, i, indent
func (_m *EchoContext) XMLPretty(code int, i interface{}, indent string) error {
	ret := _m.Called(code, i, indent)

	if len(ret) == 0 {
		panic("no return value specified for XMLPretty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}, string) error); ok {
		r0 = rf(code, i, indent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EchoContext_XMLPretty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XMLPretty'
type EchoContext_XMLPretty_Call struct {
	*mock.Call
}

// XMLPretty is a helper method to define mock.On call
//   - code int
//   - i interface{}
//   - indent string
func (_e *EchoContext_Expecter) XMLPretty(code interface{}, i interface{}, indent interface{}) *EchoContext_XMLPretty_Call {
	return &EchoContext_XMLPretty_Call{Call: _e.mock.On("XMLPretty", code, i, indent)}
}

func (_c *EchoContext_XMLPretty_Call) Run(run func(code int, i interface{}, indent string)) *EchoContext_XMLPretty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}), args[2].(string))
	})
	return _c
}

func (_c *EchoContext_XMLPretty_Call) Return(_a0 error) *EchoContext_XMLPretty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EchoContext_XMLPretty_Call) RunAndReturn(run func(int, interface{}, string) error) *EchoContext_XMLPretty_Call {
	_c.Call.Return(run)
	return _c
}

// NewEchoContext creates a new instance of EchoContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEchoContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *EchoContext {
	mock := &EchoContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
